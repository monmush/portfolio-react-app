{"version":3,"sources":["actions/RevealP.js","components/WhenInView.js","containers/About.js","containers/Home.js","components/Nav.js","containers/App.js","serviceWorker.js","index.js"],"names":["RevealL","styled","p","_templateObject","_ref","hide","css","_templateObject2","RevealR","_templateObject3","_ref2","_templateObject4","WhenInView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isInView","onEnter","bind","assertThisInitialized","currentPosition","Waypoint","inside","setState","react_default","a","createElement","es","children","Component","About","clickedHandler","display","isClicked","console","log","visibility","styleDiv","className","WhenInView_WhenInView","onClick","style","Home","Nav","Link","to","App","BrowserRouter","components_Nav","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f740977f.chunk.js","sourcesContent":["import styled, {css} from 'styled-components'\n\nexport const RevealL = styled.p`\n    position: relative;\n    color: #C93C3C;\n    &:after {\n        content:'';\n        position: absolute;\n        top:0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color:black;\n        transform-origin: left;\n        transform: rotateY(90deg);\n\n        transition: transform 2s;\n    }\n    ${({hide})=>hide && css`\n    &:after{\n        transform: rotateY(0deg);\n    }\n`}\n`;\nexport const RevealR = styled.p`\n    position: relative;\n    &:after {\n        content:'';\n        position: absolute;\n        top:0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color:black;\n        transform-origin: right;\n        transform: rotateY(90deg);\n\n        transition: transform 2s;\n    }\n    ${({hide})=>hide && css`\n    &:after{\n        transform: rotateY(0deg);\n    }\n`}\n`;","import React, {Component} from 'react'\nimport Waypoint from 'react-waypoint'\n\nexport default class WhenInView extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n          isInView: false\n      }\n      this.onEnter = this.onEnter.bind(this);\n    }\n    onEnter({currentPosition}){\n        if (currentPosition === Waypoint.inside){\n            this.setState({isInView:true})\n        }\n    }\n  \n      render() {\n      return (\n        <div>\n          <Waypoint onEnter={this.onEnter}></Waypoint>\n          {this.props.children({ isInView: this.state.isInView})}\n        </div>\n      )\n    }\n  }\n  ","import React,{Component} from 'react';\nimport '../style/Main.scss';\nimport {RevealL,\n        RevealR} \nfrom '../actions/RevealP';\nimport WhenInView from '../components/WhenInView';\n\n\nclass About extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isClicked: true,\n            display: 'hidden',\n            visibility: 'block'\n        }\n    }\n    \n    clickedHandler = () => {\n        this.setState({display:'visible'})\n        this.setState({isClicked: false})\n        \n        console.log(this.state.isClicked);\n    }\n    render(){\n        const styleDiv = {\n            visibility: this.state.display\n        }   \n        return(\n       \n\n            <div className=\"Background\">\n                <h1 className=\"Heading\">About me</h1>\n                <WhenInView>\n                    {({isInView}) => \n                        <div>\n                        <RevealR hide={!isInView}>Aute ea aliquip consectetur esse eu laborum culpa minim ipsum. Ad esse proident consectetur tempor ullamco id aute irure adipisicing culpa. Nostrud mollit mollit laborum eu anim non.</RevealR>\n                        <RevealL hide={!isInView}>Aute ea aliquip consectetur esse eu laborum culpa minim ipsum. Ad esse proident consectetur tempor ullamco id aute irure adipisicing culpa. Nostrud mollit mollit laborum eu anim non.</RevealL>\n                        \n                        \n                        </div>\n                    }\n                </WhenInView>\n                <button onClick={this.clickedHandler}>Click me</button>\n                <RevealL style={styleDiv} hide={this.state.isClicked}>\n                    Deserunt deserunt\n                </RevealL>\n                \n            </div>\n        )\n    }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport '../style/Main.scss';\n\n\n\nclass Home extends Component {\n  render() {\n    \n    return (\n      <div className=\"Home\">\n        <div className=\"Container\">\n        <h1>minh pham</h1>\n        <h2>Front-end developer</h2>\n        </div> \n      </div>    \n     \n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport '../style/Main.scss';\nimport {Link} from 'react-router-dom';\n\nconst Nav = ()=> { \n    return(\n        <div className=\"Nav\">\n         <ul> \n             <li><Link className=\"Link\" to=\"/\">Home</Link></li>\n             <li><Link className=\"Link\" to=\"/about\">About</Link></li>\n             <li><Link className=\"Link\" to=\"/\">Skills</Link></li>\n             <li><Link className=\"Link\" to=\"/\">Projects</Link></li>\n             <li><Link className=\"Link\" to=\"/\">Resume</Link></li>\n         </ul>\n        </div>\n    )\n};\n\nexport default Nav;","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport About from './About';\nimport Home from './Home';\nimport Nav from '../components/Nav';\nimport '../style/Main.scss';\n\nclass App extends Component{\n    render(){\n        return(\n            <Router>\n            <div className=\"App\">\n                <Nav/>\n                <Route path=\"/\" exact component={Home}/>             \n                <Route path=\"/about\"  component={About}/>             \n            </div>  \n          </Router>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'react-router-dom';\nimport 'typeface-space-mono';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}